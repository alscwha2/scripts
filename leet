#!/usr/bin/env python3

"""
todo: In code, remove all newlines in the function definition
"""


from selenium.webdriver import Chrome
from selenium.webdriver import ChromeOptions
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from sys import exit
from os import mkdir, environ
import argparse
from time import sleep


def parse_args():
	parser = argparse.ArgumentParser(
		prog='leet',
		description='Create solution boilerplate for leetcode problem',
		epilog='Open an issue at https://github.com/alscwha2/scripts/issues')

	parser.add_argument('url', help='URL to leetcode problem')
	parser.add_argument('--destination', help=
	'''Optional destination directory to create files.
	Allows script to be run without LEET_HOME environment variable set.
	Overrides LEET_HOME as destination.''')
    parser.add_argument('-v', '--verbose', help='Verbose output for debugging', action='store_true')
	return parser.parse_args()


def check_environment_and_options():
	has_errors = False
	if 'LEET_HOME' not in environ and args.destination == None:
		print("Please save a Leetcode home directory in the LEET_HOME environment variable, or specify a destination in --destination option.")
		has_errors = True
	if has_errors:
		exit(1)


# args and environment variables
args = parse_args()
check_environment_and_options()

# Selenium driver variables
options = ChromeOptions()
options.headless = True
chrome_driver_path = args.driver if args.driver else environ['SELENIUM_CHROME_DRIVER_PATH']

# Leetcode problem variables
leetcode_problem_URL = args.url
leetcode_home_directory_path = args.destination if args.destination else environ['LEET_HOME']
title_css_class = "mr-2"
description_css_class = "_1l1MA"
language_picker_button_xpath = "//*[text()='C++']"
python3_option_xpath = "//*[text()='Python3']"
code_xpath = "//div[@id='editor']/div[4]/div[1]/div[1]/div[1]/div[1]/div[2]"




################################################################################
############################## FUNCTION DEFINITIONS ############################
################################################################################

def get_title_and_description_and_code():
	def get_title(driver):
		return driver.find_element(By.CLASS_NAME, title_css_class)\
						.text

	def get_description(driver):
		return driver.find_element(By.CLASS_NAME, description_css_class)\
						.get_attribute('innerHTML')

	def get_code(driver):
		language_picker_button = driver.find_element(By.XPATH, language_picker_button_xpath)
		language_picker_button.click()
		python3_option = driver.find_element(By.XPATH, python3_option_xpath)
		python3_option.click()
		WebDriverWait(driver, 5)\
			.until(EC.text_to_be_present_in_element(
				(By.XPATH, code_xpath),
				'class Solution:'))
		code = driver.find_element(By.XPATH, code_xpath).text

		return code

	with Chrome(service=Service(chrome_driver_path), options=options) as driver:
		driver.get(leetcode_problem_URL)
		driver.implicitly_wait(20)
		title = get_title(driver)
		description = get_description(driver)
		code = get_code(driver)

		return title, description, code


def format_title(title: str):
	number, name = title.split(".")
	return f"{int(number):04d}.{name}"


def create_solution_file(directory_path, code):
	with open(f"{directory_path}/s.py", mode='w') as f:
		print('from typing import List\n\n', file=f)
		print(code, file=f)


def create_readme(directory_path):
	with open(f"{directory_path}/README.md", mode='w') as f:
		print(description, file=f)


################################################################################
############################ APPLICATION LOGIC #################################
################################################################################


title, description, code = get_title_and_description_and_code()
title = format_title(title)
full_path = f"{leetcode_home_directory_path}/{title}"

mkdir(full_path)
create_readme(full_path)
create_solution_file(full_path, code)
