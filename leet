#!/usr/bin/env python3.6

from selenium.webdriver import Chrome
from selenium.webdriver import ChromeOptions
from selenium.webdriver.common.by import By
from sys import exit
from os import mkdir, environ
import argparse

# test script without making directories or files
TEST = False


def parse_args():
	parser = argparse.ArgumentParser(
		prog='leet',
		description='Create solution boilerplate for leetcode problem',
		epilog='Open an issue at https://github.com/alscwha2/scripts/issues')

	parser.add_argument('url', help='URL to leetcode problem')
	parser.add_argument('-d', '--driver', help= '''
	Optional path to chromedriver.
	Allows script to be run without SELENIUM_CHROME_DRIVER_PATH environment variable set.
	Overrides SELENIUM_CHROME_DRIVER_PATH environment variable.
	''')
	parser.add_argument('--destination', help=
	'''Optional destination directory to create files.
	Allows script to be run without LEET_HOME environment variable set.
	Overrides LEET_HOME as destination.''')
	return parser.parse_args()


def check_environment_and_options():
	has_errors = False
	if 'LEET_HOME' not in environ and args.destination == None:
		print("Please save a Leetcode home directory in the LEET_HOME environment variable, or specify a destination in --destination option.")
		has_errors = True
	if 'SELENIUM_CHROME_DRIVER_PATH' not in environ and args.driver == None:
		print("Please specify the path to the selenium chromedriver in the SELENIUM_HOME_DRIVER environment variable or include in -d --driver option")
		has_errors = True
	if has_errors:
		exit(1)


args = parse_args()
check_environment_and_options()

# Selenium driver variables
options = ChromeOptions()
options.headless = True
chrome_driver_path = args.driver if args.driver else environ['SELENIUM_CHROME_DRIVER_PATH']

# Leetcode problem variables
leetcode_problem_URL = args.url
leetcode_home_directory_path = args.destination if args.destination else environ['LEET_HOME']
title_css_class = "mr-2"
description_css_class = "_1l1MA"


def get_title_and_description():
	with Chrome(executable_path=chrome_driver_path, options=options) as driver:
		driver.get(leetcode_problem_URL)
		driver.implicitly_wait(20)
		title = driver.find_element_by_class_name(title_css_class).text
		description = driver.find_element_by_class_name(description_css_class)\
							.get_attribute('innerHTML')
		return title, description


def format_title(title: str):
	number, name = title.split(".")
	return f"{int(number):04d}.{name}"


def create_solution_file(directory_path):
	with open(f"{directory_path}/s.py", mode='w') as f:
		print('from typing import List\n\n\n\n# print(Solution())', file=f)


def create_readme(directory_path):
	with open(f"{directory_path}/README.md", mode='w') as f:
		print(description, file=f)


title, description = get_title_and_description()
title = format_title(title)
full_path = f"{leetcode_home_directory_path}/{title}"

if TEST:
	print(title)
	print(full_path)
	exit(0)

mkdir(full_path)
create_readme(full_path)
create_solution_file(full_path)


"""
code snippets for later use:

code = driver.find_element(By.XPATH, "//div[@id='editor']/div[4]/div[1]/div[1]/div[1]/div[1]/div[2]").text
button = driver.find_element(By.ID, "headlessui-listbox-button-10").text

"""